import java.util.concurrent.locks.ReentrantLock
import org.eclipse.smarthome.model.script.ScriptServiceUtil

val ReentrantLock arduino_writer = new ReentrantLock
val Integer sensor_default_hyst = 20
val Integer sensor_default_dark = 80
val Integer sensor_default_sunshine = 200

rule "Startup"
  when 
    System started
  then
    logInfo ("STARTUP", "System Starting from startup rule")
    if ( S_light_southffxDarkTreshold.state == NULL ) { S_light_southffxDarkTreshold.postUpdate(sensor_default_dark) }
    if ( S_light_southffxSunshineTreshold.state == NULL ) { S_light_southffxSunshineTreshold.postUpdate(sensor_default_sunshine) }
end

rule "direct_run_gZx_group"
  when
    Member of gZ_ALL received command
  then
    try {
      logInfo("Rollershutter", "Member " + triggeringItem.name + " received " + receivedCommand)
      arduino_writer.lock()
      val String split_part1 = triggeringItem.name.toString.split("x").get(1)
      val String split_part2 = triggeringItem.name.toString.split("x").get(2)
      if (receivedCommand == DOWN) {
        ARDUINO_SEND_Args.sendCommand(split_part1 + " " + split_part2 +" 1")
        ARDUINO_SEND.sendCommand(ON)
    }
      if (receivedCommand == UP) {
        logInfo ("Rollershutter", "GOING UP ")
        ARDUINO_SEND_Args.sendCommand(split_part1 + " " + split_part2 +" 2")
        ARDUINO_SEND.sendCommand(ON)
      }
      if (receivedCommand == STOP) {
        ARDUINO_SEND_Args.sendCommand(split_part1 + " " + split_part2 +" 0")
        ARDUINO_SEND.sendCommand(ON)
      }
      logInfo("Rollershutter", "Member " + triggeringItem.name + " received " + receivedCommand + " translated to" + split_part1 + "+" + split_part2 )
    }catch(Throwable t) {}
    finally {
        arduino_writer.unlock()
    }
end

rule "South SLD"
// 0:Sunshine 1:Light 2:Dark test
  when
    Item S_light_southffxINRAW changed
  then
    //logInfo("Light", "Light changed input is " + S_light_southffxSLD.state + "/" + S_light_southffxINRAW.state)
    if ( S_light_southffxDarkTreshold.state == NULL ) { S_light_southffxDarkTreshold.postUpdate(sensor_default_dark) }
    if ( S_light_southffxSunshineTreshold.state == NULL ) { S_light_southffxSunshineTreshold.postUpdate(sensor_default_sunshine) }
    if ( S_light_southffxSLD.state == NULL ) {
      if ( (S_light_southffxINRAW.state as Number) <= (S_light_southffxDarkTreshold.state as Number) ) { S_light_southffxSLD.sendCommand (2) }
      else if ( (S_light_southffxINRAW.state as Number) <= (S_light_southffxSunshineTreshold.state as Number) ) { S_light_southffxSLD.sendCommand (1) }
      else if ( (S_light_southffxINRAW.state as Number) > (S_light_southffxSunshineTreshold.state as Number) ) { S_light_southffxSLD.sendCommand (0) }
    }
    else {
      if ( (S_light_southffxSLD.state as Number) == 0 ) {
        if ( (S_light_southffxINRAW.state as Number) <= (S_light_southffxDarkTreshold.state as Number) ) { S_light_southffxSLD.sendCommand (2) }
        else if ( (S_light_southffxINRAW.state as Number) <= ((S_light_southffxSunshineTreshold.state as Number) - sensor_default_hyst)) { S_light_southffxSLD.sendCommand (1) }
      }
      if ( (S_light_southffxSLD.state as Number) == 1 ) {
        if ( (S_light_southffxINRAW.state as Number) >= ((S_light_southffxSunshineTreshold.state as Number) + sensor_default_hyst) ) { S_light_southffxSLD.sendCommand (0) }
        else if ( (S_light_southffxINRAW.state as Number) <= ((S_light_southffxDarkTreshold.state as Number) - sensor_default_hyst)) { S_light_southffxSLD.sendCommand (2) }
      }
      if ( (S_light_southffxSLD.state as Number) == 2 ) {
        if ( (S_light_southffxINRAW.state as Number) >= (S_light_southffxSunshineTreshold.state as Number) ) { S_light_southffxSLD.sendCommand (0) }
        else if ( (S_light_southffxINRAW.state as Number) >= ((S_light_southffxDarkTreshold.state as Number) + sensor_default_hyst)) { S_light_southffxSLD.sendCommand (1) }
      }
    }
end

rule "test run"
  when
    Member of gTEST received command
  then
    ECHO_SEND_Args.sendCommand("10 4 0")
    logInfo("EchoSimple", "Member " + triggeringItem.name + " received " + receivedCommand + " finished with " + ECHO_SEND_Out.state)
end

rule "Test item name change"
  // based on https://community.openhab.org/t/design-pattern-working-with-groups-in-rules/20512
  when
    Item Z1_S_TSTxMAIN received command
  then
    val String split_part0 = triggeringItem.name.toString.split("x").get(0)
    val String split_part1 = triggeringItem.name.toString.split("x").get(1)
    logInfo ("Test", "Split as " + split_part0 + " and " + split_part1)
    val local_ItemName = split_part0 + "xEngine"
    val local_EngineNumber = ScriptServiceUtil.getItemRegistry.getItem(local_ItemName)
    local_EngineNumber.postUpdate (47)
    logInfo ("Test", "Item value " + local_EngineNumber.state + "vs" + Z1_S_TSTxEngine.state)
end
